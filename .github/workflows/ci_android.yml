name: Android Integration Tests

on:
  workflow_call:
  workflow_dispatch:

jobs:
  android:
    runs-on: ubuntu-latest
    timeout-minutes: 80
    strategy:
      matrix:
        api-level: [34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21]
      fail-fast: false
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          channel: beta
          cache: true

      - name: Install Flutter dependencies
        run: flutter pub get ./example

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.android/.gradle
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Cache AVD
        uses: actions/cache@v4
        id: cache-avd
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ runner.os }}-${{ matrix.api-level }}-${{ hashFiles('.github/workflows/ci_android.yml') }}
          restore-keys: |
            avd-${{ runner.os }}-${{ matrix.api-level }}-

      - name: Create AVD and install system image
        if: steps.cache-avd.outputs.cache-hit != 'true'
        run: |
          # Use x86 for older API levels, x86_64 for newer ones for better stability
          if [[ ${{ matrix.api-level }} -le 23 ]]; then
            ARCH="x86"
          else
            ARCH="x86_64"
          fi
          echo "Using architecture: $ARCH for API level ${{ matrix.api-level }}"
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "system-images;android-${{ matrix.api-level }};google_apis;$ARCH"
          echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd -n test -k "system-images;android-${{ matrix.api-level }};google_apis;$ARCH" --force

      - name: Start Android Emulator
        run: |
          echo "Starting Android emulator..."
          $ANDROID_HOME/emulator/emulator -avd test \
            -no-audio -no-window -no-boot-anim \
            -camera-back none -camera-front none \
            -gpu swiftshader_indirect \
            -accel on -no-snapshot-save \
            -memory 2048 -partition-size 2048 \
            -netdelay none -netspeed full &
          
          # Store emulator PID and verify it started
          EMULATOR_PID=$!
          sleep 10
          if ! ps -p $EMULATOR_PID > /dev/null 2>&1; then
            echo "ERROR: Emulator process failed to start or crashed"
            exit 1
          fi
          echo "Emulator process started successfully (PID: $EMULATOR_PID)"
          
      - name: Wait for emulator to boot
        timeout-minutes: 10
        run: |
          echo "Waiting for emulator to be detected..."
          $ANDROID_HOME/platform-tools/adb wait-for-device
          
          echo "Waiting for boot completion..."
          timeout 300 bash -c '
            while true; do
              boot_completed=$(adb shell getprop sys.boot_completed 2>/dev/null | tr -d "[:space:]")
              if [[ "$boot_completed" == "1" ]]; then
                echo "Boot completed detected"
                break
              fi
              echo "Waiting for boot completion... (boot_completed: $boot_completed)"
              sleep 3
            done
          '
          
          echo "Waiting for launcher to be ready..."
          timeout 60 bash -c '
            while true; do
              launcher_ready=$(adb shell getprop service.bootanim.exit 2>/dev/null | tr -d "[:space:]")
              if [[ "$launcher_ready" == "1" ]]; then
                echo "Launcher ready"
                break
              fi
              echo "Waiting for launcher... (bootanim.exit: $launcher_ready)"
              sleep 2
            done
          '
          
          echo "Unlocking screen..."
          $ANDROID_HOME/platform-tools/adb shell input keyevent 82
          sleep 2
          
          echo "Verifying emulator is responsive..."
          $ANDROID_HOME/platform-tools/adb shell input keyevent 4  # Back key
          
          echo "Waiting for package manager to be ready..."
          timeout 60 bash -c '
            while true; do
              if adb shell pm list packages >/dev/null 2>&1; then
                echo "Package manager is ready"
                break
              fi
              echo "Waiting for package manager..."
              sleep 2
            done
          '
          
          echo "Emulator startup completed successfully"

      - name: Run integration tests
        id: Run-integration-tests
        continue-on-error: true
        timeout-minutes: 20
        working-directory: ./example
        run: |
          # Verify emulator is still responsive before proceeding
          $ANDROID_HOME/platform-tools/adb devices -l
          
          # Build and install APK for API levels that need it
          if [[ ${{ matrix.api-level }} -le 29 ]]; then 
            echo "Building APK for API level ${{ matrix.api-level }}"
            flutter build apk --debug
            
            echo "Installing APK on emulator"
            $ANDROID_HOME/platform-tools/adb install -t -r build/app/outputs/flutter-apk/app-debug.apk
            
            echo "Granting permissions"
            $ANDROID_HOME/platform-tools/adb shell pm grant studio.midoridesign.gal_example android.permission.WRITE_EXTERNAL_STORAGE || true
            $ANDROID_HOME/platform-tools/adb shell pm grant studio.midoridesign.gal_example android.permission.READ_EXTERNAL_STORAGE || true
            $ANDROID_HOME/platform-tools/adb shell pm grant studio.midoridesign.gal_example android.permission.MANAGE_EXTERNAL_STORAGE || true
          fi
          
          echo "Running integration tests"
          flutter test integration_test/integration_test.dart

      - name: Retry integration tests
        id: Retry-integration-tests
        continue-on-error: true
        timeout-minutes: 20
        if: steps.Run-integration-tests.outcome == 'failure'
        working-directory: ./example
        run: |
          echo "Restarting ADB server for retry"
          $ANDROID_HOME/platform-tools/adb kill-server
          $ANDROID_HOME/platform-tools/adb start-server
          
          echo "Cleaning and reinstalling dependencies"
          flutter clean && flutter pub get
          
          # Wait a bit for ADB to stabilize
          sleep 5
          $ANDROID_HOME/platform-tools/adb devices -l
          
          if [[ ${{ matrix.api-level }} -le 29 ]]; then 
            echo "Rebuilding and reinstalling APK for retry"
            flutter build apk --debug
            $ANDROID_HOME/platform-tools/adb install -t -r build/app/outputs/flutter-apk/app-debug.apk
            
            echo "Re-granting permissions"
            $ANDROID_HOME/platform-tools/adb shell pm grant studio.midoridesign.gal_example android.permission.WRITE_EXTERNAL_STORAGE || true
            $ANDROID_HOME/platform-tools/adb shell pm grant studio.midoridesign.gal_example android.permission.READ_EXTERNAL_STORAGE || true
            $ANDROID_HOME/platform-tools/adb shell pm grant studio.midoridesign.gal_example android.permission.MANAGE_EXTERNAL_STORAGE || true
          fi
          
          echo "Retrying integration tests"
          flutter test integration_test/integration_test.dart

      - name: Re:Retry integration tests
        if: steps.Retry-integration-tests.outcome == 'failure'
        timeout-minutes: 20
        working-directory: ./example
        run: |
          echo "Final attempt - restarting ADB server"
          $ANDROID_HOME/platform-tools/adb kill-server
          $ANDROID_HOME/platform-tools/adb start-server
          
          echo "Final clean and dependency installation"
          flutter clean && flutter pub get
          
          # Wait longer for ADB to stabilize on final attempt
          sleep 10
          $ANDROID_HOME/platform-tools/adb devices -l
          
          if [[ ${{ matrix.api-level }} -le 29 ]]; then 
            echo "Final APK build and installation"
            flutter build apk --debug
            $ANDROID_HOME/platform-tools/adb install -t -r build/app/outputs/flutter-apk/app-debug.apk
            
            echo "Final permission grants"
            $ANDROID_HOME/platform-tools/adb shell pm grant studio.midoridesign.gal_example android.permission.WRITE_EXTERNAL_STORAGE || true
            $ANDROID_HOME/platform-tools/adb shell pm grant studio.midoridesign.gal_example android.permission.READ_EXTERNAL_STORAGE || true
            $ANDROID_HOME/platform-tools/adb shell pm grant studio.midoridesign.gal_example android.permission.MANAGE_EXTERNAL_STORAGE || true
          fi
          
          echo "Final attempt at integration tests"
          flutter test integration_test/integration_test.dart