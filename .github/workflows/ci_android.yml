name: Android Integration Tests

on:
  workflow_call:
  workflow_dispatch:

jobs:
  android:
    runs-on: ubuntu-latest
    timeout-minutes: 80
    strategy:
      matrix:
        api-level: [34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21]
      fail-fast: false
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Enable KVM and Optimize System
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
          
          # Optimize system for Android emulator
          echo "Optimizing system resources..."
          # Increase file descriptor limits
          ulimit -n 4096 || echo "Could not increase file descriptor limit"
          # Set swappiness to reduce swap usage
          echo 1 | sudo tee /proc/sys/vm/swappiness >/dev/null || echo "Could not set swappiness"
          # Check initial system resources
          echo "=== Initial System Resources ==="
          free -h
          df -h .
          nproc

      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          channel: beta
          cache: true

      - name: Install Flutter dependencies
        run: |
          echo "Installing Flutter dependencies with error handling..."
          cd ./example
          
          # Verify Flutter is working
          flutter --version
          flutter doctor --android-licenses || echo "Android licenses already accepted"
          
          # Install dependencies with retry
          for attempt in 1 2 3; do
            if flutter pub get; then
              echo "Flutter dependencies installed successfully on attempt $attempt"
              break
            else
              echo "Flutter pub get failed on attempt $attempt"
              if [[ $attempt -lt 3 ]]; then
                flutter clean
                sleep 2
              fi
            fi
          done
          
          # Verify dependencies are correctly installed
          flutter pub deps || echo "Could not verify dependencies"

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.android/.gradle
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Cache AVD
        uses: actions/cache@v4
        id: cache-avd
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ runner.os }}-${{ matrix.api-level }}-${{ hashFiles('.github/workflows/ci_android.yml') }}
          restore-keys: |
            avd-${{ runner.os }}-${{ matrix.api-level }}-

      - name: Create AVD and install system image
        if: steps.cache-avd.outputs.cache-hit != 'true'
        run: |
          # Use x86 for older API levels, x86_64 for newer ones for better stability
          if [[ ${{ matrix.api-level }} -le 23 ]]; then
            ARCH="x86"
          else
            ARCH="x86_64"
          fi
          echo "Using architecture: $ARCH for API level ${{ matrix.api-level }}"
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "system-images;android-${{ matrix.api-level }};google_apis;$ARCH"
          echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd -n test -k "system-images;android-${{ matrix.api-level }};google_apis;$ARCH" --force

      - name: Start Android Emulator
        run: |
          echo "Starting Android emulator..."
          $ANDROID_HOME/emulator/emulator -avd test \
            -no-audio -no-window -no-boot-anim \
            -camera-back none -camera-front none \
            -gpu swiftshader_indirect \
            -accel on -no-snapshot-save \
            -memory 2048 -partition-size 2048 \
            -netdelay none -netspeed full &
          
          # Store emulator PID and verify it started
          EMULATOR_PID=$!
          sleep 10
          if ! ps -p $EMULATOR_PID > /dev/null 2>&1; then
            echo "ERROR: Emulator process failed to start or crashed"
            exit 1
          fi
          echo "Emulator process started successfully (PID: $EMULATOR_PID)"
          
      - name: Wait for emulator to boot
        timeout-minutes: 10
        run: |
          echo "Waiting for emulator to be detected..."
          $ANDROID_HOME/platform-tools/adb wait-for-device
          
          echo "Waiting for boot completion..."
          timeout 300 bash -c '
            while true; do
              boot_completed=$(adb shell getprop sys.boot_completed 2>/dev/null | tr -d "[:space:]")
              if [[ "$boot_completed" == "1" ]]; then
                echo "Boot completed detected"
                break
              fi
              echo "Waiting for boot completion... (boot_completed: $boot_completed)"
              sleep 3
            done
          '
          
          echo "Waiting for launcher to be ready..."
          timeout 60 bash -c '
            while true; do
              launcher_ready=$(adb shell getprop service.bootanim.exit 2>/dev/null | tr -d "[:space:]")
              if [[ "$launcher_ready" == "1" ]]; then
                echo "Launcher ready"
                break
              fi
              echo "Waiting for launcher... (bootanim.exit: $launcher_ready)"
              sleep 2
            done
          '
          
          echo "Unlocking screen..."
          $ANDROID_HOME/platform-tools/adb shell input keyevent 82
          sleep 2
          
          echo "Verifying emulator is responsive..."
          $ANDROID_HOME/platform-tools/adb shell input keyevent 4  # Back key
          
          echo "Waiting for package manager to be ready..."
          timeout 60 bash -c '
            while true; do
              if adb shell pm list packages >/dev/null 2>&1; then
                echo "Package manager is ready"
                break
              fi
              echo "Waiting for package manager..."
              sleep 2
            done
          '
          
          echo "Emulator startup completed successfully"

      - name: Run integration tests
        id: Run-integration-tests
        continue-on-error: true
        timeout-minutes: 20
        working-directory: ./example
        run: |
          # Comprehensive emulator health check
          echo "Performing comprehensive emulator health check..."
          adb devices -l
          
          # Verify device is online and responsive
          if ! adb shell echo "Device responsive" >/dev/null 2>&1; then
            echo "ERROR: Device not responsive, restarting ADB"
            adb kill-server && adb start-server
            sleep 5
            adb wait-for-device
          fi
          
          # Build and install APK for API levels that need it
          if [[ ${{ matrix.api-level }} -le 29 ]]; then 
            echo "Building APK for API level ${{ matrix.api-level }}"
            flutter build apk --debug
            
            echo "Installing APK on emulator with retries"
            for attempt in 1 2 3; do
              if adb install -t -r build/app/outputs/flutter-apk/app-debug.apk; then
                echo "APK installation successful on attempt $attempt"
                break
              else
                echo "APK installation failed on attempt $attempt"
                if [[ $attempt -lt 3 ]]; then
                  sleep 5
                  adb kill-server && adb start-server
                  sleep 3
                  adb wait-for-device
                fi
              fi
            done
            
            echo "Granting storage permissions for API ${{ matrix.api-level }}"
            adb shell pm grant studio.midoridesign.gal_example android.permission.WRITE_EXTERNAL_STORAGE 2>/dev/null || echo "WRITE_EXTERNAL_STORAGE permission not needed or failed"
            adb shell pm grant studio.midoridesign.gal_example android.permission.READ_EXTERNAL_STORAGE 2>/dev/null || echo "READ_EXTERNAL_STORAGE permission not needed or failed"
            
            # Grant MANAGE_EXTERNAL_STORAGE for API 30+ if needed
            if [[ ${{ matrix.api-level }} -ge 30 ]]; then
              adb shell pm grant studio.midoridesign.gal_example android.permission.MANAGE_EXTERNAL_STORAGE 2>/dev/null || echo "MANAGE_EXTERNAL_STORAGE permission not needed or failed"
            fi
          fi
          
          # Final device state verification before tests
          echo "Final emulator verification before tests..."
          adb shell getprop ro.build.version.sdk
          adb shell pm list packages | grep gal_example || echo "App package not found, may be running without APK"
          
          # Check available disk space
          df -h . || echo "Disk space check failed"
          
          # Optimize Flutter test environment
          export FLUTTER_TEST_TIMEOUT=600
          export INTEGRATION_TEST_ZOMBIE_TIME=600
          
          echo "Running integration tests with optimized environment"
          timeout 18m flutter test integration_test/integration_test.dart --reporter=expanded || {
            echo "Integration test failed or timed out"
            # Capture some debug info on failure
            adb shell dumpsys activity | head -20 || echo "Could not get activity dump"
            adb shell ps | grep flutter || echo "No flutter processes found"
            exit 1
          }

      - name: Retry integration tests
        id: Retry-integration-tests
        continue-on-error: true
        timeout-minutes: 20
        if: steps.Run-integration-tests.outcome == 'failure'
        working-directory: ./example
        run: |
          echo "Restarting ADB server for retry"
          $ANDROID_HOME/platform-tools/adb kill-server
          $ANDROID_HOME/platform-tools/adb start-server
          
          echo "Cleaning and reinstalling dependencies"
          flutter clean && flutter pub get
          
          # Extended ADB stabilization for retry
          echo "Stabilizing ADB connection for retry..."
          sleep 8
          adb wait-for-device
          adb devices -l
          
          # Verify device responsiveness after restart
          for i in {1..3}; do
            if adb shell echo "test" >/dev/null 2>&1; then
              echo "Device responsive after ADB restart"
              break
            else
              echo "Device not responsive, attempt $i/3"
              sleep 5
            fi
          done
          
          if [[ ${{ matrix.api-level }} -le 29 ]]; then 
            echo "Rebuilding and reinstalling APK for retry"
            flutter build apk --debug
            
            # More robust APK installation for retry
            for attempt in 1 2; do
              if adb install -t -r build/app/outputs/flutter-apk/app-debug.apk; then
                echo "APK reinstallation successful on attempt $attempt"
                break
              else
                echo "APK reinstallation failed on attempt $attempt"
                if [[ $attempt -lt 2 ]]; then
                  sleep 3
                fi
              fi
            done
            
            echo "Re-granting permissions with better error handling"
            adb shell pm grant studio.midoridesign.gal_example android.permission.WRITE_EXTERNAL_STORAGE 2>/dev/null || echo "WRITE_EXTERNAL_STORAGE not granted"
            adb shell pm grant studio.midoridesign.gal_example android.permission.READ_EXTERNAL_STORAGE 2>/dev/null || echo "READ_EXTERNAL_STORAGE not granted"
            if [[ ${{ matrix.api-level }} -ge 30 ]]; then
              adb shell pm grant studio.midoridesign.gal_example android.permission.MANAGE_EXTERNAL_STORAGE 2>/dev/null || echo "MANAGE_EXTERNAL_STORAGE not granted"
            fi
          fi
          
          echo "Retrying integration tests with extended timeout"
          export FLUTTER_TEST_TIMEOUT=720
          export INTEGRATION_TEST_ZOMBIE_TIME=720
          
          timeout 19m flutter test integration_test/integration_test.dart --reporter=expanded || {
            echo "Retry integration test failed or timed out"
            adb shell dumpsys activity | head -20 || echo "Could not get activity dump"
            adb logcat -d | tail -50 || echo "Could not get logcat"
            exit 1
          }

      - name: Re:Retry integration tests
        if: steps.Retry-integration-tests.outcome == 'failure'
        timeout-minutes: 20
        working-directory: ./example
        run: |
          echo "Final attempt - restarting ADB server"
          $ANDROID_HOME/platform-tools/adb kill-server
          $ANDROID_HOME/platform-tools/adb start-server
          
          echo "Final clean and dependency installation"
          flutter clean && flutter pub get
          
          # Extended stabilization for final attempt
          echo "Extended ADB stabilization for final attempt..."
          sleep 12
          adb wait-for-device
          adb devices -l
          
          # Comprehensive device health check for final attempt
          echo "Comprehensive device check for final attempt..."
          adb shell getprop sys.boot_completed
          adb shell getprop ro.build.version.sdk
          adb shell input keyevent 82  # unlock screen again
          
          if [[ ${{ matrix.api-level }} -le 29 ]]; then 
            echo "Final APK build and installation with maximum robustness"
            flutter build apk --debug
            
            # Most robust APK installation for final attempt
            for attempt in 1 2 3; do
              echo "Final APK installation attempt $attempt/3"
              if adb install -t -r build/app/outputs/flutter-apk/app-debug.apk; then
                echo "Final APK installation successful"
                break
              else
                echo "Final APK installation failed on attempt $attempt"
                if [[ $attempt -lt 3 ]]; then
                  adb kill-server && adb start-server
                  sleep 5
                  adb wait-for-device
                fi
              fi
            done
            
            echo "Final permission grants with comprehensive coverage"
            adb shell pm grant studio.midoridesign.gal_example android.permission.WRITE_EXTERNAL_STORAGE 2>/dev/null || echo "WRITE_EXTERNAL_STORAGE final grant failed"
            adb shell pm grant studio.midoridesign.gal_example android.permission.READ_EXTERNAL_STORAGE 2>/dev/null || echo "READ_EXTERNAL_STORAGE final grant failed"
            if [[ ${{ matrix.api-level }} -ge 30 ]]; then
              adb shell pm grant studio.midoridesign.gal_example android.permission.MANAGE_EXTERNAL_STORAGE 2>/dev/null || echo "MANAGE_EXTERNAL_STORAGE final grant failed"
            fi
            
            # Verify app is properly installed for final attempt
            adb shell pm list packages | grep gal_example && echo "App package verified" || echo "WARNING: App package not found"
          fi
          
          echo "Final attempt at integration tests with maximum timeout"
          export FLUTTER_TEST_TIMEOUT=900
          export INTEGRATION_TEST_ZOMBIE_TIME=900
          
          # Clear any potential zombie processes
          pkill -f "flutter.*test" || echo "No zombie Flutter test processes found"
          
          # Final comprehensive system check
          echo "=== Final System State ==="
          adb devices -l
          adb shell getprop sys.boot_completed
          adb shell getprop ro.build.version.sdk
          df -h . | head -2
          free -h
          
          timeout 19m flutter test integration_test/integration_test.dart --reporter=expanded --verbose || {
            echo "FINAL ATTEMPT FAILED - Collecting comprehensive debug info"
            adb shell dumpsys activity | head -30
            adb shell dumpsys meminfo | head -10
            adb logcat -d | tail -100
            adb shell ps | grep -E '(flutter|gal)'
            exit 1
          }